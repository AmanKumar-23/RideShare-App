{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///Users/aman/Downloads/sec%20project/carpool-app/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:5001/api';\n\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// 🔐 Attach token to headers using interceptors\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    console.log('🔑 Token in interceptor:', token ? 'Present' : 'Missing');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log('🔒 Added Authorization header');\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nexport const ridesAPI = {\n  createRide: async (rideData:RideData) => {\n    try {\n      console.log('🚗 Creating ride with token:', localStorage.getItem('token') ? 'Present' : 'Missing');\n      const response = await axiosInstance.post('/rides', rideData);\n      console.log('✅ Ride created successfully');\n      return response.data;\n    } catch (error: any) {\n      console.error('❌ Error creating ride:', error);\n      if (error.response) {\n        console.error('Error response:', {\n          status: error.response.status,\n          data: error.response.data,\n          headers: error.response.headers\n        });\n      } else if (error.request) {\n        console.error('No response received:', error.request);\n      }\n      throw error;\n    }\n  },\n  getAllRides: async (params = {}) => {\n    try {\n      const queryString = new URLSearchParams(params).toString();\n      \n      // Safely access localStorage only in browser environment\n      const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;\n      \n      const response = await fetch(`/api/rides?${queryString}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(token ? { 'Authorization': `Bearer ${token}` } : {})\n        }\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('Error response:', {\n          status: response.status,\n          data: errorData\n        });\n        throw new Error(`Failed to fetch rides: ${response.status} ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching rides:', error);\n      throw error;\n    }\n  },\n  getRideById: async (id: string) => {\n    const response = await axiosInstance.get(`/rides/${id}`);\n    return response.data;\n  }\n};\n\nexport const authAPI = {\n  login: async (credentials: { email: string; password: string }) => {\n    try {\n      console.log('🔐 Attempting login...');\n      const response = await axios.post(`${API_BASE_URL}/auth/login`, credentials);\n      console.log('✅ Login response received:', response.data);\n      \n      const { token, user } = response.data;\n      if (!token) {\n        throw new Error('No token received from server');\n      }\n      \n      console.log('💾 Storing token in localStorage...');\n      localStorage.setItem('token', token);\n      console.log('✅ Token stored successfully');\n      \n      return { token, user };\n    } catch (error: any) {\n      console.error('❌ Login Error:', error);\n      if (error.response) {\n        console.error('Server response:', error.response.data);\n      }\n      throw error;\n    }\n  },\n  register: async (userData: { name: string; email: string; password: string; phone: string }) => {\n    try {\n      console.log('📝 Attempting registration...');\n      const response = await axios.post(`${API_BASE_URL}/auth/register`, userData);\n      console.log('✅ Registration response received:', response.data);\n      \n      const { token, user } = response.data;\n      if (!token) {\n        throw new Error('No token received from server');\n      }\n      \n      console.log('💾 Storing token in localStorage...');\n      localStorage.setItem('token', token);\n      console.log('✅ Token stored successfully');\n      \n      return { token, user };\n    } catch (error: any) {\n      console.error('❌ Registration Error:', error);\n      if (error.response) {\n        console.error('Server response:', error.response.data);\n      }\n      throw error;\n    }\n  },\n  logout: () => {\n    console.log('🚪 Logging out, removing token...');\n    localStorage.removeItem('token');\n    console.log('✅ Token removed');\n  }\n};\n\nexport const userAPI = {\n  getProfile: async () => {\n    try {\n      console.log('👤 Fetching user profile...');\n      const response = await axiosInstance.get('/user/profile');\n      console.log('✅ Profile fetched successfully');\n      return response.data;\n    } catch (error) {\n      console.error('❌ Profile Error:', error);\n      throw error;\n    }\n  }\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":["file:///Users/aman/Downloads/sec%20project/carpool-app/src/contexts/AuthContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI, userAPI } from '@/services/api';\n\ninterface AuthContextType {\n  user: any | null;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<any>;\n  register: (userData: { name: string; email: string; password: string; phone: string }) => Promise<any>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<any | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const checkTokenExpiration = (token: string) => {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const expirationTime = payload.exp * 1000; // Convert to milliseconds\n      \n      // If token is expired or will expire in next 5 minutes\n      if (expirationTime < Date.now() + 300000) {\n        console.log('Token expired or expiring soon');\n        localStorage.removeItem('token');\n        setUser(null);\n        return false;\n      }\n      return true;\n    } catch (error) {\n      console.error('Error checking token expiration:', error);\n      localStorage.removeItem('token');\n      setUser(null);\n      return false;\n    }\n  };\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        console.log('Checking auth with token:', token ? 'present' : 'absent');\n        \n        if (!token) {\n          setUser(null);\n          setIsLoading(false);\n          return;\n        }\n\n        if (checkTokenExpiration(token)) {\n          try {\n            const userData = await userAPI.getProfile();\n            console.log('User profile fetched:', userData);\n            setUser(userData);\n          } catch (error) {\n            console.error('Failed to fetch user profile:', error);\n            localStorage.removeItem('token');\n            setUser(null);\n          }\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        localStorage.removeItem('token');\n        setUser(null);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    checkAuth();\n  \n    // Set up periodic token check every minute\n    const tokenCheckInterval = setInterval(() => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        checkTokenExpiration(token);\n      }\n    }, 60000);\n  \n    return () => clearInterval(tokenCheckInterval);\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      setIsLoading(true);\n      const response = await authAPI.login({ email, password });\n      \n      if (!response || !response.token) {\n        throw new Error('Invalid response from server');\n      }\n  \n      console.log('Login successful, setting token and user');\n      localStorage.setItem('token', response.token);\n      \n      if (response.user) {\n        setUser(response.user);\n        return response.user;\n      }\n      \n      const userData = await userAPI.getProfile();\n      setUser(userData);\n      return userData;\n    } catch (error: any) {\n      console.error('Login error:', error);\n      let errorMessage = 'An unexpected error occurred. Please try again';\n      \n      if (error.response) {\n        switch (error.response.status) {\n          case 400:\n            errorMessage = 'Invalid email or password format';\n            break;\n          case 401:\n            errorMessage = 'Invalid email or password';\n            break;\n          case 404:\n            errorMessage = 'User not found';\n            break;\n          case 500:\n            errorMessage = 'Server error. Please try again later';\n            break;\n          default:\n            errorMessage = error.response.data?.message || errorMessage;\n        }\n      } else if (error.request) {\n        errorMessage = 'Unable to connect to server. Please check your internet connection';\n      }\n      \n      throw new Error(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (userData: { name: string; email: string; password: string; phone: string }) => {\n    try {\n      setIsLoading(true);\n      const { token, user: newUser } = await authAPI.register(userData);\n      \n      if (!token || !newUser) {\n        throw new Error('Invalid response from server during registration');\n      }\n\n      console.log('Registration successful, setting token and user');\n      localStorage.setItem('token', token);\n      setUser(newUser);\n      return newUser;\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    console.log('Logging out, clearing token and user');\n    localStorage.removeItem('token');\n    setUser(null);\n    authAPI.logout();\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isLoading, login, register, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":["file:///Users/aman/Downloads/sec%20project/carpool-app/src/providers.tsx"],"sourcesContent":["'use client';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport { AuthProvider } from '@/contexts/AuthContext';\n\nexport function Providers({ children }: { children: React.ReactNode }) {\n  const [queryClient] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          queries: {\n            // During development, disable retries\n            retry: process.env.NODE_ENV === 'production',\n            // Disable automatic background refetching\n            refetchOnWindowFocus: false,\n            // Keep data fresh for 5 minutes\n            staleTime: 5 * 60 * 1000,\n          },\n        },\n      })\n  );\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        {children}\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}"],"names":[],"mappings":";;;;AACA;AAAA;AACA;AACA;AAHA;;;;;AAKO,SAAS,UAAU,EAAE,QAAQ,EAAiC;IACnE,MAAM,CAAC,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAC3B,IACE,IAAI,6KAAA,CAAA,cAAW,CAAC;YACd,gBAAgB;gBACd,SAAS;oBACP,sCAAsC;oBACtC,OAAO,oDAAyB;oBAChC,0CAA0C;oBAC1C,sBAAsB;oBACtB,gCAAgC;oBAChC,WAAW,IAAI,KAAK;gBACtB;YACF;QACF;IAGJ,qBACE,8OAAC,sLAAA,CAAA,sBAAmB;QAAC,QAAQ;kBAC3B,cAAA,8OAAC,+HAAA,CAAA,eAAY;sBACV;;;;;;;;;;;AAIT","debugId":null}}]
}